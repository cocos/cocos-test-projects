// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs:vert
      frag: standard-fs:frag
      properties: &props
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        mainTexture: { value: white }
  - name: transparent
    passes:
    - vert: standard-vs:vert
      frag: standard-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
  };
}%

CCProgram standard-vs %{
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <shared-ubos>

  #if USE_VERTEX_COLOR
    in vec3 a_color;
    // out vec3 v_color;
  #endif

  
  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    // #if USE_VERTEX_COLOR
    //   v_color = a_color;
    // #endif

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram standard-fs %{
  precision highp float;
  #include <cc-global>
  // #include <shading-standard>
  // #include <output-standard>
  // #include <gamma>
  #include <shared-ubos>
  #include <embedded-alpha>

#if USE_TEXTURE
  in vec2 v_uv;
  uniform sampler2D mainTexture;
#endif

  // #if USE_VERTEX_COLOR
  //   in vec3 v_color;
  // #endif

  vec4 frag () {
      vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleTexture(mainTexture, v_uv);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // o *= vec4(v_color, 1.0);
    return o;
  }
}%
