"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e="automation-framework";function o(...o){return console.log(`[${e}] `,...o)}exports.load=async function(){},exports.onAfterBuild=async function(e,o){},exports.onAfterCompressSettings=async function(e,o){console.log("onAfterCompressSettings")},exports.onAfterInit=async function(e,o){},exports.onBeforeBuild=async function(t,s){o(`${e}`,"onBeforeBuild")},exports.onBeforeBuildAssets=async function(t,s,n){if(!t.packages[e].AutoTest){const t=await Editor.Message.request("asset-db","query-asset-info","db://automation-framework/runtime/test-framework.mjs"),r=await Editor.Message.request("asset-db","query-asset-info","db://automation-framework/runtime/main.ts");for(const i of s.bundles){void 0!==t?.uuid&&(o(`automation-framework/runtime/test-framework.mjs---${t?.uuid} has been removed`),i.removeAsset(t?.uuid)),void 0!==r?.uuid&&(o(`automation-framework/runtime/main.ts---${r?.uuid} has been removed`),i.removeAsset(r?.uuid));for(const e of i.scripts){const t=n.getAssetInfo(e);-1!==t.name.indexOf(".test.ts")&&(o(`${t.name}---${e} has been removed`),i.removeAsset(e))}o(`${e}`,"onBeforeBuildAssets")}}},exports.onBeforeCompressSettings=async function(e,o){console.debug("get settings test",o.settings)},exports.onBeforeInit=async function(e,o){},exports.throwError=!0,exports.unload=async function(){console.log(`[${e}] Unload cocos plugin example in builder.`)};
